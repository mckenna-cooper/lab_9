{
  "hash": "033efbcd2e0663fa30c7b73efeb20084",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Draft Report\"\nauthors:\n  - name: Mckenna Cooper\n    affiliation: Colorado State University\n    roles: writing\n    corresponding: true\n  - name: Sarah Culhane\n    affiliation: Colorado State University\n    roles: writing\n    corresponding: false\n  - name: Archer Goodman\n    affiliation: Colorado State University\n    roles: writing\n    corresponding: false\nexecute:\n  echo: true\n  \nbibiography: references.bib\n---\n\n\n\n\n\n# Lab 9: Project Updates (Results and Discussion)\n\n## Methods\nOur analysis focused on assessing the relationship between riparian vegetation characteristics and the diversity of freshwater macroinvertebrates, especially EPT taxa (Ephemeroptera, Plecoptera, Trichoptera), in Lassen Volcanic National Park for the years 2013 and 2019. We began by loading three datasets: InvertSpecies.csv, RiparianCover.csv, and WaterQuality.csv, filtering each to include only observations from Lassen Volcanic National Park in the target years. Using shared identifiers (Lake_Code, Start_Date, Park_Name), we merged the datasets for each year to create two comprehensive data frames, one for 2013 and one for 2019. To evaluate invertebrate community health, we calculated an EPT Score, defined as the ratio of EPT taxa counts to non-EPT taxa counts for each sampling date. Riparian vegetation quality was proxied through the categorical variable Barren_AreaCcover, which we converted into a numerical estimate of vegetative cover. We selected the 2013 dataset to build and evaluate a random forest regression model predicting EPT Score using water-quality and vegetation-related predictors: temperature in celsius, pH, dissolved oxygen, and estimated vegetative cover. Data was split into training and testing sets using initial_split(), and a cross-validation strategy (vfold_cv) was applied. We tuned model hyperparameters using tune_grid() and finalized the model based on RMSE performance. To visualize patterns and support interpretation, we generated several plots using ggplot2, including: Bar plots comparing insect order abundances by year\n\nBoxplots of water quality metrics across years\n\nA correlation heatmap to assess relationships between water quality parameters, EPT scores, and vegetation\n\nA barren cover comparison plot between 2013 and 2019\n\nAll analyses were conducted in RStudio using the tidymodels, dplyr, and ggplot2 packages.\n\n## Drafting the Results\n\n### Data Prep & Modeling:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#Loading Libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tibble       3.2.1\n✔ infer        1.0.7     ✔ tidyr        1.3.1\n✔ modeldata    1.4.0     ✔ tune         1.3.0\n✔ parsnip      1.3.0     ✔ workflows    1.2.0\n✔ purrr        1.0.4     ✔ workflowsets 1.1.0\n✔ recipes      1.1.1     ✔ yardstick    1.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'broom' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(parsnip)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#Load data\ninvert_species <- read.csv(\"InvertSpecies.csv\")\nriparian_cover <- read.csv(\"RiparianCover.csv\")\nwater_quality <- read.csv(\"WaterQuality.csv\")\n\n# Filter for Lassen Volcanic National Park and our year of 2013\ninvert_species_2013 <- invert_species %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\" & \n           (Start_Date >= as.Date(\"2013-01-01\") & \n           Start_Date <= as.Date(\"2013-12-31\")) |\n           (Start_Date >= as.Date(\"2019-01-01\") & \n           Start_Date <= as.Date(\"2019-12-31\")))\n\nriparian_cover_2013 <- riparian_cover %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\" & \n           (Start_Date >= as.Date(\"2013-01-01\") & \n           Start_Date <= as.Date(\"2013-12-31\")) | \n           (Start_Date >= as.Date(\"2019-01-01\") & \n           Start_Date <= as.Date(\"2019-12-31\")))\n\nwater_quality_2013 <- water_quality %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\" & \n           (Start_Date >= as.Date(\"2013-01-01\") & \n           Start_Date <= as.Date(\"2013-12-31\")) |\n           (Start_Date >= as.Date(\"2019-01-01\") & \n           Start_Date <= as.Date(\"2019-12-31\")))\n\n# Merge datasets\nmerged_data_2013 <- invert_species_2013 %>%\n  inner_join(riparian_cover_2013, by = c(\"Lake_Code\", \"Park_Name\", \"Start_Date\")) %>%\n  inner_join(water_quality_2013, by = c(\"Lake_Code\", \"Park_Name\", \"Start_Date\"))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in inner_join(., riparian_cover_2013, by = c(\"Lake_Code\", \"Park_Name\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in inner_join(., water_quality_2013, by = c(\"Lake_Code\", \"Park_Name\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#glimpse(merged_data_2013)\n\n#Selecting our data for 2019\ninvert_species_2019 <- invert_species %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\" & \n           Start_Date >= as.Date(\"2019-01-01\") & \n           Start_Date <= as.Date(\"2019-12-31\"))\n\nriparian_cover_2019 <- riparian_cover %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\" & \n           Start_Date >= as.Date(\"2019-01-01\") & \n           Start_Date <= as.Date(\"2019-12-31\"))\n\nwater_quality_2019 <- water_quality %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\" & \n           Start_Date >= as.Date(\"2019-01-01\") & \n           Start_Date <= as.Date(\"2019-12-31\"))\n\n# Merge datasets\nmerged_data_2019 <- invert_species_2019 %>%\n  inner_join(riparian_cover_2019, by = c(\"Lake_Code\", \"Park_Name\", \"Start_Date\")) %>%\n  inner_join(water_quality_2019, by = c(\"Lake_Code\", \"Park_Name\", \"Start_Date\"))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in inner_join(., riparian_cover_2019, by = c(\"Lake_Code\", \"Park_Name\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in inner_join(., water_quality_2019, by = c(\"Lake_Code\", \"Park_Name\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#glimpse(merged_data_2019)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#setting up some useful metrics, limiting data to stuff we need\nmelded_data_2013 <- merged_data_2013 |>\n  mutate(EPT_taxa = ifelse(Order == \"Ephemeroptera\" |\n                             Order == \"Plecoptera\" |\n                             Order == \"Trichoptera\", \n                           \"Yes\", \"No\"),\n         Veg_Cover = case_when(\n           Barren_AreaCcover == \"sparse (<10%)\" ~ 0.05,\n           Barren_AreaCcover == \"moderate (10-40%)\" ~ 0.25,\n           Barren_AreaCcover == \"heavy (40-75%)\" ~ 0.57,\n           Barren_AreaCcover == \"very heavy (>75%)\" ~ 0.87)) |>\n  summarize(Unit_Code, \n            Park_Name, \n            Lake_Code, \n            Start_Date, \n            Order, \n            Count, \n            EPT_taxa, \n            Veg_Cover, \n            Temperature_C,\n            Dissolved_oxygen, \n            pH, \n            Depth_m, \n            Turbidity, \n            )\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nmelded_data_2013 <- melded_data_2013 |>\n  group_by(Start_Date, Unit_Code) |>\n  mutate(\n    Yes_Total = sum(Count[EPT_taxa == \"Yes\"], na.rm = TRUE),\n    No_Total = sum(Count[EPT_taxa == \"No\"], na.rm = TRUE),\n    EPT_Score = Yes_Total / No_Total\n  ) |>\n  ungroup()\n\nglimpse(melded_data_2013)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 217,950\nColumns: 16\n$ Unit_Code        <chr> \"CRLA\", \"CRLA\", \"CRLA\", \"CRLA\", \"CRLA\", \"CRLA\", \"CRLA…\n$ Park_Name        <chr> \"Crater Lake National Park\", \"Crater Lake National Pa…\n$ Lake_Code        <chr> \"CRLAWQL04\", \"CRLAWQL04\", \"CRLAWQL04\", \"CRLAWQL04\", \"…\n$ Start_Date       <chr> \"2019-09-10\", \"2019-09-10\", \"2019-09-10\", \"2019-09-10…\n$ Order            <chr> \"Trichoptera\", \"Trichoptera\", \"Trichoptera\", \"Trichop…\n$ Count            <int> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ EPT_taxa         <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes…\n$ Veg_Cover        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.25,…\n$ Temperature_C    <dbl> 13.61, 13.60, 13.72, 13.69, 13.61, 13.60, 13.72, 13.6…\n$ Dissolved_oxygen <dbl> 6.07, 6.12, 7.15, 6.53, 6.07, 6.12, 7.15, 6.53, 6.07,…\n$ pH               <dbl> 6.59, 6.61, 6.65, 6.61, 6.59, 6.61, 6.65, 6.61, 6.59,…\n$ Depth_m          <dbl> 1.12, 1.03, 0.00, 0.50, 1.12, 1.03, 0.00, 0.50, 1.12,…\n$ Turbidity        <dbl> -1.08, -1.20, -1.22, -1.21, -1.08, -1.20, -1.22, -1.2…\n$ Yes_Total        <int> 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180…\n$ No_Total         <int> 38400, 38400, 38400, 38400, 38400, 38400, 38400, 3840…\n$ EPT_Score        <dbl> 0.0046875, 0.0046875, 0.0046875, 0.0046875, 0.0046875…\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#and the same for 2019\nmelded_data_2019 <- merged_data_2019 |>\n  mutate(EPT_taxa = ifelse(Order == \"Ephemeroptera\" |\n                             Order == \"Plecoptera\" |\n                             Order == \"Trichoptera\", \n                           \"Yes\", \"No\")) |>\n  summarize(Unit_Code, \n            Park_Name, \n            Lake_Code, \n            Start_Date, \n            Order, \n            Count, \n            EPT_taxa, \n            Barren_AreaCcover, \n            Temperature_C, \n            Dissolved_oxygen, \n            pH, \n            Depth_m, \n            Turbidity, \n            )\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nmelded_data_2019 <- melded_data_2019 |>\n  group_by(Start_Date, Unit_Code) |>\n  mutate(\n    Yes_Total = sum(Count[EPT_taxa == \"Yes\"], na.rm = TRUE),\n    No_Total = sum(Count[EPT_taxa == \"No\"], na.rm = TRUE),\n    EPT_Score = Yes_Total / No_Total\n  ) |>\n  ungroup()\n#glimpse(melded_data_2013)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#Conduct a test. \nset.seed(15379)\n#used my old robotics team's number for the seed, easy for me to remember\n\n#We're gonna do this with just 2013 data for right now\n#giving my data splits catchy names \nbanana_split <- initial_split(melded_data_2013, prop = 0.8)\n#Chocolate > choochoo > train > training data\nchoco_choochoo <- training(banana_split)\n#vanilla > vanilla ice > mic check \"testing testing\" > testing data\nvanilla_ice_mic <- testing(banana_split)\n\n#glimpse(choco_choochoo)\n\n#specifying a recipe\nsundae_recipe <- recipe(EPT_Score ~ \n                          Start_Date +\n                          Veg_Cover + \n                          Temperature_C + \n                          Dissolved_oxygen + \n                          pH + \n                          Depth_m + \n                          Turbidity, \n                        data = choco_choochoo) |>\n  step_normalize(all_numeric_predictors())\n\n#specifying a model\nicecream_model <- rand_forest(mtry = tune(), trees = 250, min_n = 500) |>\n  set_engine(\"ranger\") |>\n  set_mode(\"regression\")\n\n#creating workflow\nicecream_scoop <- workflow() |>\n  add_model(icecream_model) |>\n  add_recipe(sundae_recipe)\n\n#testing the model with cross_validation\n#validating the process for making a new icecream flavor\nvalidated_process <- vfold_cv(vanilla_ice_mic, v = 5)\n#tuning the model\nsalt_to_taste <- tune_grid(\n  icecream_scoop,\n  resamples = validated_process,\n  grid = 10\n)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\ni Creating pre-processing data to finalize unknown parameter: mtry\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'ranger' was built under R version 4.4.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#selecting the best model\n#choosing the best formulas for the new icecream flavor\nbest_flavor <- select_best(salt_to_taste, metric = \"rmse\")\n\n#finalizing the model\n#selecting the winning flavor\nfinal_flavor <- finalize_model(icecream_model, best_flavor)\n\n#workflow with finalized model\n#designing packaging for new flavor i guess?\nfinal_flav_package <- icecream_scoop |>\n  finalize_workflow(best_flavor)\n\n#fitting the workflow to the training data\n#shipping the new flavor to the stores\nicecream_retail <- final_flav_package |>\n  fit(data = choco_choochoo)\n\n#making predictions\n#seeing how the market reacts to the new flavor\npublic_tastes <- predict(icecream_retail, new_data = vanilla_ice_mic) |>\n  bind_cols(vanilla_ice_mic)\n\n#evaluating model performance\n#Leaving a review of the ice cream flavor i guess\nparlor_review <- public_tastes |>\n  metrics(truth = EPT_Score, estimate = .pred)\n\n#visualising model performance\nggplot(public_tastes, aes(x = EPT_Score, y = .pred)) + \n  geom_point(alpha = 0.5) + \n  geom_abline(linetype = \"dashed\", color = \"blue\") + \n  labs(x = \"Actual\", y = \"Predicted\", title = \"Predicted vs Actual\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## For Taxa Order\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Summarize 2013 data\ninsect_order_counts_2013 <- melded_data_2013 %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\") %>%\n  group_by(Order) %>%\n  summarise(Total_Count = sum(Count, na.rm = TRUE)) %>%\n  mutate(Year = 2013)\n\n# Summarize 2019 data\ninsect_order_counts_2019 <- melded_data_2019 %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\") %>%\n  group_by(Order) %>%\n  summarise(Total_Count = sum(Count, na.rm = TRUE)) %>%\n  mutate(Year = 2019)\n\n# Combine both\ninsect_order_counts_combined <- bind_rows(insect_order_counts_2013, insect_order_counts_2019)\n\n# Plot\nggplot(insect_order_counts_combined, aes(x = reorder(Order, -Total_Count), y = Total_Count, fill = factor(Year))) +\n  geom_col(position = \"dodge\") +\n  labs(\n    title = \"Comparison of Insect Counts by Order: 2013 vs 2019\",\n    x = \"Insect Order\",\n    y = \"Total Count\",\n    fill = \"Year\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## For Barren Cover\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Add year column to each dataset\nbarren_2013 <- merged_data_2013 %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\") %>%\n  select(Barren_AreaCcover) %>%\n  mutate(Year = 2013)\n\nbarren_2019 <- merged_data_2019 %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\") %>%\n  select(Barren_AreaCcover) %>%\n  mutate(Year = 2019)\n\n# Combine both\nbarren_combined <- bind_rows(barren_2013, barren_2019)\n\n# Plot\nggplot(barren_combined, aes(x = Barren_AreaCcover, fill = factor(Year))) +\n  geom_bar(position = \"dodge\") +\n  labs(\n    title = \"Barren Area Cover in Lassen Volcanic National Park (2013 vs 2019)\",\n    x = \"Barren Area Cover Category\",\n    y = \"Number of Observations\",\n    fill = \"Year\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## For Water Quality Box Plots\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Combine data, reshape, and filter\nwater_quality_box <- bind_rows(\n  melded_data_2013 %>% mutate(Year = \"2013\"),\n  melded_data_2019 %>% mutate(Year = \"2019\")\n) %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\") %>%\n  select(Temperature_C, Dissolved_oxygen, pH, Year) %>%\n  drop_na() %>%\n  pivot_longer(cols = c(Temperature_C, Dissolved_oxygen, pH),\n               names_to = \"Metric\", values_to = \"Value\")\n\n# Create box plot\nggplot(water_quality_box, aes(x = Year, y = Value, fill = Year)) +\n  geom_boxplot(alpha = 0.7, outlier.color = \"black\") +\n  facet_wrap(~ Metric, scales = \"free_y\") +\n  labs(\n    title = \"Box Plots of Water Quality Metrics (Lassen Volcanic National Park)\",\n    x = \"Year\",\n    y = \"Value\"\n  ) +\n  scale_fill_manual(values = c(\"2013\" = \"blue\", \"2019\" = \"orange\")) +\n  theme_minimal() +\n  theme(text = element_text(size = 13), legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## For Correlation Heat Map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Combine 2013 and 2019 data, filter, and select relevant columns\ncor_data_full <- bind_rows(\n  melded_data_2013 %>% mutate(Year = \"2013\"),\n  melded_data_2019 %>% mutate(Year = \"2019\")\n) %>%\n  filter(Park_Name == \"Lassen Volcanic National Park\") %>%\n  select(Temperature_C, Dissolved_oxygen, pH, EPT_Score, Veg_Cover) %>%\n  drop_na()\n\n# Compute correlation matrix\ncor_matrix_full <- cor(cor_data_full, use = \"complete.obs\")\n\n# Reshape for heatmap\nlibrary(reshape2)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'reshape2' was built under R version 4.4.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'reshape2'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:tidyr':\n\n    smiths\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ncor_melt_full <- melt(cor_matrix_full)\n\n# Plot heatmap\nggplot(cor_melt_full, aes(Var1, Var2, fill = value)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient2(\n    low = \"red\", high = \"blue\", mid = \"white\",\n    midpoint = 0, limit = c(-1, 1),\n    name = \"Correlation\"\n  ) +\n  labs(\n    title = \"Correlation Heatmap: Water Quality, EPT Score, and Barren Cover (Lassen Volcanic National Park)\",\n    x = NULL, y = NULL\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Discussion\n\nResults suggest that there was an overall decline in macroinvertebrate taxa richness across all orders between 2013 and 2019 in water bodies within Lassen Volcanic National Park. The strong positive correlation between pH, dissolved oxygen, and EPT_score suggests that the decline in pH and dissolved oxygen present in those water bodies may have been partially responsible for the decline in taxa richness. Vegetation present in riparian zones within the park seemed to have increased, according to our analysis, and veg_cover and EPT_score seem to have a negative correlation. This suggests that as vegetation cover increased, taxa richness decreased, which goes against our hypothesis that more riparian cover would lead to high taxa richness. The cause of this is unknown and warrants further research. Going forward, more focused research and data collection needs to be done to find the source of pollution in Lassen Volcanic National Park so that measures can be taken to combat pollution at the source and improve the water quality of water bodies within the park. Limitations of our analysis include the fact that there was a lot of cleaning that had to be done in our dataset, and there was a disproportionate amount of data for each of the national parks and years that data was collected, with some parks and years having significantly more data than others. Crater Lake National Park especially had less data than both Volcanic National Park and Redwood National State Park.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}